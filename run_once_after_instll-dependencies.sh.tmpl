#!/bin/bash

set -eufo pipefail

{{- /* This script installs essential development tools: fzf, asdf, and thefuck */ -}}
{{- /* It only runs when this script changes or on first run */ -}}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect package manager
detect_package_manager() {
    if command -v apt-get &> /dev/null; then
        echo "apt"
    elif command -v yum &> /dev/null; then
        echo "yum"
    elif command -v dnf &> /dev/null; then
        echo "dnf"
    elif command -v pacman &> /dev/null; then
        echo "pacman"
    elif command -v brew &> /dev/null; then
        echo "brew"
    else
        echo "unknown"
    fi
}

# Install dependencies based on package manager
install_system_deps() {
    local pm=$(detect_package_manager)
    
    case $pm in
        "apt")
            log_info "Installing dependencies via apt..."
            sudo apt-get update
            sudo apt-get install -y git curl wget build-essential
            ;;
        "yum"|"dnf")
            log_info "Installing dependencies via $pm..."
            sudo $pm install -y git curl wget gcc gcc-c++ make
            ;;
        "pacman")
            log_info "Installing dependencies via pacman..."
            sudo pacman -S --noconfirm git curl wget base-devel
            ;;
        "brew")
            log_info "Dependencies should already be available on macOS..."
            ;;
        *)
            log_warning "Unknown package manager. Please install git, curl, wget, and build tools manually."
            ;;
    esac
}

# Install fzf
install_fzf() {
    log_info "Installing fzf..."
    
    if command -v fzf &> /dev/null; then
        log_warning "fzf is already installed"
        return 0
    fi
    
    # Clone fzf repository
    if [ ! -d "$HOME/.fzf" ]; then
        log_info "Cloning fzf repository..."
        git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf"
    else
        log_info "Updating fzf repository..."
        cd "$HOME/.fzf" && git pull
    fi
    
    # Install fzf
    log_info "Installing fzf binary and shell integration..."
    "$HOME/.fzf/install" --key-bindings --completion --no-update-rc
    
    # Add fzf to PATH by creating a symlink or adding to PATH
    # Create local bin directory if it doesn't exist
    mkdir -p "$HOME/.local/bin"
    
    # Create symlink to make fzf available in PATH
    if [ ! -L "$HOME/.local/bin/fzf" ] && [ ! -f "$HOME/.local/bin/fzf" ]; then
        ln -s "$HOME/.fzf/bin/fzf" "$HOME/.local/bin/fzf"
        log_info "Created symlink for fzf in ~/.local/bin"
    fi
    
    log_success "fzf installed successfully"
}

# Install asdf
install_asdf() {
    log_info "Installing asdf..."
    
    if [ -d "$HOME/.asdf" ]; then
        log_warning "asdf is already installed, updating..."
        cd "$HOME/.asdf" && git pull
    else
        log_info "Cloning asdf repository..."
        git clone https://github.com/asdf-vm/asdf.git "$HOME/.asdf" --branch v0.14.0
    fi
    
    # Source asdf to make it available in this script
    if [ -f "$HOME/.asdf/asdf.sh" ]; then
        . "$HOME/.asdf/asdf.sh"
        log_success "asdf installed successfully"
    else
        log_error "Failed to install asdf"
        return 1
    fi
}

# Install thefuck
install_thefuck() {
    log_info "Installing thefuck..."
    
    if command -v thefuck &> /dev/null; then
        log_warning "thefuck is already installed"
        return 0
    fi
    
    # Try different installation methods based on available package managers
    local pm=$(detect_package_manager)
    
    case $pm in
        "brew")
            log_info "Installing thefuck via Homebrew..."
            brew install thefuck
            ;;
        "apt")
            log_info "Installing thefuck via apt..."
            sudo apt-get update
            sudo apt-get install -y python3-dev python3-pip python3-setuptools
            pip3 install --user thefuck
            ;;
        "pacman")
            log_info "Installing thefuck via pacman..."
            sudo pacman -S --noconfirm thefuck
            ;;
        *)
            # Fallback to pip installation
            log_info "Installing thefuck via pip..."
            if command -v pip3 &> /dev/null; then
                pip3 install --user thefuck
            elif command -v pip &> /dev/null; then
                pip install --user thefuck
            else
                log_error "Neither pip nor pip3 found. Please install Python and pip first."
                return 1
            fi
            ;;
    esac
    
    log_success "thefuck installed successfully"
}

# Verify installations
verify_installations() {
    log_info "Verifying installations..."
    
    local all_good=true
    
    # Check fzf
    if [ -f "$HOME/.fzf/bin/fzf" ] || command -v fzf &> /dev/null; then
        log_success "✓ fzf is available"
    else
        log_error "✗ fzf installation failed"
        all_good=false
    fi
    
    # Check asdf
    if [ -f "$HOME/.asdf/asdf.sh" ]; then
        log_success "✓ asdf is available"
    else
        log_error "✗ asdf installation failed"
        all_good=false
    fi
    
    # Check thefuck
    if command -v thefuck &> /dev/null || [ -f "$HOME/.local/bin/thefuck" ]; then
        log_success "✓ thefuck is available"
    else
        log_error "✗ thefuck installation failed"
        all_good=false
    fi
    
    if [ "$all_good" = true ]; then
        log_success "All dependencies installed successfully!"
        log_info "Please restart your shell or run 'source ~/.zshrc' to load the new tools."
    else
        log_error "Some installations failed. Please check the errors above."
        exit 1
    fi
}

# Main installation process
main() {
    log_info "Starting installation of development dependencies..."
    log_info "This will install: fzf, asdf, and thefuck"
    
    # Install system dependencies first
    install_system_deps
    
    # Install each tool
    install_fzf
    install_asdf
    install_thefuck
    
    # Verify everything worked
    verify_installations
    
    log_success "Installation complete!"
}

# Only run if not being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi